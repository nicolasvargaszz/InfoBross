#include <SFML/Graphics.hpp>
#include "../include/TiledMap.h"
#include <iostream>

int cara()
{
    sf::VideoMode mode({800, 600});
    sf::RenderWindow window(mode, "Map Demo");

    TiledMap tiledMap("../assets/maps/map1.json", "../Kings and Pigs/Sprites/Terrain (32x32).png");

    sf::RectangleShape player({32, 32});
    player.setFillColor(sf::Color::Red);
    player.setPosition({100.f, 100.f});

    sf::Clock clock; // Para medir delta time

    float playerSpeed = 100.f; // pixeles por segundo

    while (window.isOpen())
    {
        std::optional<sf::Event> evOpt = window.pollEvent();
        while (evOpt.has_value())
        {
            const sf::Event& ev = evOpt.value();
            if (ev.is<sf::Event::Closed>())
                window.close();

            evOpt = window.pollEvent();
        }

        float dt = clock.restart().asSeconds();

        sf::Vector2f movement{0.f, 0.f};

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Left))  movement.x -= playerSpeed * dt;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Right)) movement.x += playerSpeed * dt;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Up))    movement.y -= playerSpeed * dt;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Down))  movement.y += playerSpeed * dt;

        // Mover por X y chequear colisiones
        sf::FloatRect playerBounds = player.getGlobalBounds();
        playerBounds.position.x += movement.x;

        if (!tiledMap.isColliding(playerBounds))
        {
            player.move({movement.x, 0.f});
        }

        // Mover por Y y chequear colisiones
        playerBounds = player.getGlobalBounds();
        playerBounds.position.y += movement.y;

        if (!tiledMap.isColliding(playerBounds))
        {
            player.move({0.f, movement.y});
        }

        window.clear(sf::Color::Black);
        window.draw(tiledMap);
        window.draw(player);
        window.display();
    }

    return 0;
}